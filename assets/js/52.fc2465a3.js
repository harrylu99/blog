(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{631:function(e,t,s){"use strict";s.r(t);var a=s(17),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"foreword"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreword"}},[e._v("#")]),e._v(" Foreword")]),e._v(" "),s("p",[e._v("From the previous article which we talked about "),s("code",[e._v("beginWork")]),e._v(", we know that as for the "),s("code",[e._v("update")]),e._v(" component, it will compare the the current component with the Fiber node corresponding to the component at the last update (also known as "),s("code",[e._v("Diff")]),e._v(" algorithm), and generate a new Fiber node as a result of the comparison.")]),e._v(" "),s("p",[e._v("And in this section, we will focus on the implement of "),s("code",[e._v("Diff")]),e._v(" algorithm.")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm",target:"_blank",rel:"noopener noreferrer"}},[e._v("You can check the defination of "),s("code",[e._v("Diff")]),e._v(" from here."),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[e._v("Something we have to mention again before we get into the detail.")]),e._v(" "),s("p",[e._v("A "),s("code",[e._v("DOM node")]),e._v(" will have up to 4 nodes associated with it at a given time.")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("current Fiber")]),e._v(". If the "),s("code",[e._v("DOM node")]),e._v(" is already in the page, "),s("code",[e._v("current Fiber")]),e._v(" represents the "),s("code",[e._v("Fiber node")]),e._v(" corresponding to the "),s("code",[e._v("DOM node")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("workInProgress Fiber")]),e._v(". If this "),s("code",[e._v("DOM node")]),e._v(" will be rendered to the page in this update, "),s("code",[e._v("workInProgress")]),e._v(" Fiber represents the "),s("code",[e._v("Fiber node")]),e._v(" corresponding to this "),s("code",[e._v("DOM node")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("DOM node")]),e._v(" itself.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("JSX object")]),e._v(". The result of a "),s("code",[e._v("ClassComponent")]),e._v(" "),s("code",[e._v("render")]),e._v(" method, or a "),s("code",[e._v("FunctionComponent")]),e._v(" call. "),s("code",[e._v("JSX object")]),e._v(" should contains the infomation which used for describle the "),s("code",[e._v("DOM node")]),e._v(".")])])]),e._v(" "),s("p",[e._v("The essence of the "),s("code",[e._v("Diff algorithm")]),e._v(" is to compare 1 and 4 to generate 2.")])]),s("h2",{attrs:{id:"the-bottleneck-of-diff-and-how-react-solve-it"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-bottleneck-of-diff-and-how-react-solve-it"}},[e._v("#")]),e._v(" The Bottleneck of "),s("code",[e._v("Diff")]),e._v(" and How "),s("code",[e._v("React")]),e._v(" Solve It")]),e._v(" "),s("p",[e._v("Since the "),s("code",[e._v("Diff")]),e._v(" comes with performance loss, the React documentation mentions that even in the most cutting-edge algorithms, the complexity of the algorithm that completely compares the two trees before and after is O(n3), where n is the number of elements in the tree.")]),e._v(" "),s("p",[e._v("If the algorithm was used in "),s("code",[e._v("React")]),e._v(", the amount of computation that would need to be performed to display 1000 elements would be in the order of a billion. This overhead is simply too high.")]),e._v(" "),s("p",[s("code",[e._v("React")]),e._v("'s "),s("code",[e._v("Piff")]),e._v(" presupposes three limits for reducing the complexity of the algorithm,")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("Diff")]),e._v(" only for the sibling elements. If a "),s("code",[e._v("DOM node")]),e._v(" spans hierarchies in two updates before and after, "),s("code",[e._v("React")]),e._v(" will not try to reuse it.")])]),e._v(" "),s("li",[s("p",[e._v("Two elements of different types will have different trees. If an element changes from "),s("code",[e._v("div")]),e._v(" to "),s("code",[e._v("p")]),e._v(", React will destroy the "),s("code",[e._v("div")]),e._v(" and its decendents and create a new "),s("code",[e._v("p")]),e._v(" and its decendents.")])]),e._v(" "),s("li",[s("p",[e._v("The developer can use "),s("code",[e._v("key prop")]),e._v(" to imply which child elements will keep stable under different renderings. Consider the following example")])])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// before update")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("p key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("hello"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("h3 key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"world"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("world"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("h3"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// after update")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("h3 key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"world"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("world"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("h3"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("p key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("hello"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n")])])]),s("p",[e._v("Without "),s("code",[e._v("key")]),e._v(", "),s("code",[e._v("React")]),e._v(" will think that the first child node of "),s("code",[e._v("div")]),e._v(" is changed from "),s("code",[e._v("p")]),e._v(" to "),s("code",[e._v("h3")]),e._v(" and the second child node is changed from "),s("code",[e._v("h3")]),e._v(" to "),s("code",[e._v("p")]),e._v(". This is in accordance with the setting of restriction 2, it will be destroyed and create a new one.")]),e._v(" "),s("p",[e._v("But when we use "),s("code",[e._v("key")]),e._v(" to specify the node before and after the correspondence, "),s("code",[e._v("React")]),e._v(" knows that "),s("code",[e._v("p")]),e._v(" with "),s("code",[e._v('key === "hello"')]),e._v(" still exists after the update, so the "),s("code",[e._v("DOM node")]),e._v(" can be reused, just need to swap the order.")]),e._v(" "),s("p",[e._v("These are the three restrictions how "),s("code",[e._v("React")]),e._v(" solving the bottleneck of the algorithm performance.")]),e._v(" "),s("h2",{attrs:{id:"implement-of-diff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implement-of-diff"}},[e._v("#")]),e._v(" Implement of Diff")]),e._v(" "),s("p",[e._v("Let's start with the start function "),s("code",[e._v("reconcileChildFibers")]),e._v(" of "),s("code",[e._v("Diff")]),e._v(", it will use different to deal process based on the "),s("code",[e._v("newChild")]),e._v(", which is the "),s("code",[e._v("JSX object")]),e._v(".")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1280",target:"_blank",rel:"noopener noreferrer"}},[e._v("You can check the source code of "),s("code",[e._v("reconcileChildFibers")]),e._v(" from here."),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// use different diff fun based on the newChild")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("reconcileChildFibers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("returnFiber")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("currentFirstChild")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("newChild")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" any")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" isObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typeof")]),e._v(" newChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'object'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" newChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!==")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("isObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// type of object, could be REACT_ELEMENT_TYPE or REACT_PORTAL_TYPE")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("switch")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("newChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("$$"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("REACT_ELEMENT_TYPE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// call reconcileSingleElement")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typeof")]),e._v(" newChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'string'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typeof")]),e._v(" newChild "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'number'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// call reconcileSingleTextNode")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("newChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// call reconcileChildrenArray")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// other funciton")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// cannot satisfy one of above, delete the node")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("deleteRemainingChildren")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("returnFiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" currentFirstChild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("We could devided "),s("code",[e._v("Diff")]),e._v(" into two groups based on the node")]),e._v(" "),s("ul",[s("li",[e._v("When the type of "),s("code",[e._v("newChild")]),e._v(" is "),s("code",[e._v("object")]),e._v(", "),s("code",[e._v("number")]),e._v(" or "),s("code",[e._v("string")]),e._v(", which means only one node in the same level.")]),e._v(" "),s("li",[e._v("When the type of "),s("code",[e._v("newChild")]),e._v(" is "),s("code",[e._v("Array")]),e._v(", which means mutiple node in the same level.")])]),e._v(" "),s("p",[e._v("We will discuss those two different type of "),s("code",[e._v("Diff")]),e._v(" separately.")])])}),[],!1,null,null,null);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{608:function(t,a,s){"use strict";s.r(a);var e=s(17),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"program-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#program-structure"}},[t._v("#")]),t._v(" Program Structure")]),t._v(" "),s("p",[t._v("A C# program should inclues these part")]),t._v(" "),s("ul",[s("li",[t._v("Namespace Declaration")]),t._v(" "),s("li",[t._v("a Class")]),t._v(" "),s("li",[t._v("Class Method")]),t._v(" "),s("li",[t._v("Class Property")]),t._v(" "),s("li",[t._v("a Main method")]),t._v(" "),s("li",[t._v("Statements and Expressions")]),t._v(" "),s("li",[t._v("annotation")])]),t._v(" "),s("p",[t._v("The Filename Extension of C# file is "),s("code",[t._v(".cs")])]),t._v(" "),s("p",[t._v('Here is an example of a C# file which could console "Hello World".')]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("HelloWorldApplication")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorld")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* My first C# program*/")]),t._v("\n         Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v('You will see "Hello World" printed in your console.')]),t._v(" "),s("h2",{attrs:{id:"basic-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-syntax"}},[t._v("#")]),t._v(" Basic Syntax")]),t._v(" "),s("p",[t._v("C# is an object-oriented programming language. In the approach of OOP, a program consists of a variety of objects which interact with each other. Same kind objects are usually have the same type, or in the same class. We could have the implement of Rectangle class as the example.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("RectangleApplication")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Member Variables")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")])]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")])]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Acceptdetails")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetArea")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Length: {0}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Width: {0}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Area: {0}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetArea")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecuteRectangle")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Rectangle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Acceptdetails")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"using-keyword"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-keyword"}},[t._v("#")]),t._v(" using Keyword")]),t._v(" "),s("p",[t._v("Every C# program should begin with")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("using")]),t._v(" keyword is used for contains the namespace in the program, every program could have mutiple "),s("code",[t._v("using")]),t._v(" statement.")]),t._v(" "),s("h3",{attrs:{id:"class-keyword"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-keyword"}},[t._v("#")]),t._v(" class Keyword")]),t._v(" "),s("p",[s("code",[t._v("class")]),t._v(" used for the declaration of a class.")]),t._v(" "),s("h3",{attrs:{id:"annotation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#annotation"}},[t._v("#")]),t._v(" annotation")]),t._v(" "),s("p",[t._v("In C#, we use "),s("code",[t._v("/*... */")]),t._v(" for annotation mutilple line of code.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/* This program demonstrates\nThe basic syntax of C# programming\nLanguage */\n")])])]),s("p",[t._v("You can use "),s("code",[t._v("//")]),t._v(" for annotation single line.")]),t._v(" "),s("h3",{attrs:{id:"member-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#member-variables"}},[t._v("#")]),t._v(" Member Variables")]),t._v(" "),s("p",[t._v("variables are the attributes or the data member of the class, used for store data. In the exmaple above, class Rectangle has two member variables, which are length and width.")]),t._v(" "),s("h3",{attrs:{id:"member-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#member-function"}},[t._v("#")]),t._v(" Member Function")]),t._v(" "),s("p",[t._v("Function declared inside the class. Class Rectangle from the example has three member functions, AcceptDetail, GetArea and Display.")]),t._v(" "),s("h3",{attrs:{id:"instantiate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instantiate"}},[t._v("#")]),t._v(" Instantiate")]),t._v(" "),s("p",[t._v("In the example, class ExecuteRectangle is a class which inclues a Main() method and instantiate class Rectangle.")]),t._v(" "),s("h3",{attrs:{id:"identifier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#identifier"}},[t._v("#")]),t._v(" Identifier")]),t._v(" "),s("p",[t._v("Identifier used for indentfy the class, variable, function or any other program. In C#, naming of class must follow these rules.")]),t._v(" "),s("ul",[s("li",[t._v("Must start with alphabet, underline "),s("code",[t._v("_")]),t._v(" or "),s("code",[t._v("@")]),t._v(".")]),t._v(" "),s("li",[t._v("Cannot start with number.")]),t._v(" "),s("li",[t._v("Cannot contain any embedding space or symbol.")]),t._v(" "),s("li",[t._v("Case sensitivity.")]),t._v(" "),s("li",[t._v("Cannot be the same as the name of the C# Class Library.")])]),t._v(" "),s("h2",{attrs:{id:"data-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-type"}},[t._v("#")]),t._v(" Data Type")]),t._v(" "),s("p",[t._v("Data type of C# could be grouped as")]),t._v(" "),s("ul",[s("li",[t._v("Value types")]),t._v(" "),s("li",[t._v("Reference types")]),t._v(" "),s("li",[t._v("Pointer types")])]),t._v(" "),s("h3",{attrs:{id:"value-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value-types"}},[t._v("#")]),t._v(" Value types")]),t._v(" "),s("p",[t._v("Variable from value types could be assigned to an value. It inclues")]),t._v(" "),s("ul",[s("li",[t._v("bool")]),t._v(" "),s("li",[t._v("byte")]),t._v(" "),s("li",[t._v("char")]),t._v(" "),s("li",[t._v("decimal")]),t._v(" "),s("li",[t._v("double")]),t._v(" "),s("li",[t._v("float")]),t._v(" "),s("li",[t._v("int")]),t._v(" "),s("li",[t._v("long")]),t._v(" "),s("li",[t._v("sbyte")]),t._v(" "),s("li",[t._v("short")]),t._v(" "),s("li",[t._v("unit")]),t._v(" "),s("li",[t._v("ulong")]),t._v(" "),s("li",[t._v("ushort")])]),t._v(" "),s("h3",{attrs:{id:"reference-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference-types"}},[t._v("#")]),t._v(" Reference types")]),t._v(" "),s("p",[t._v("Reference types do not contain the actual data which stored in the variable, but they contain references to the variable.")]),t._v(" "),s("p",[t._v("In other words, they refer to a memory location. When using multiple variables, the reference type can point to a memory location. If the data for the memory location is changed by one variable, the other variables would reflect the change in this value. Built-in reference types are: "),s("code",[t._v("object")]),t._v(", "),s("code",[t._v("dynamic")]),t._v(", and "),s("code",[t._v("string")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"object-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-types"}},[t._v("#")]),t._v(" Object types")]),t._v(" "),s("p",[t._v("Object type is the base class of every data types from the Common Type Ststem. Object type could be assgin the value of any types after type conversation. We use boxing to named the action when a value type be convered to an oject type. And unboxing means for the action when an object type be convered to the value type.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is boxing")]),t._v("\n")])])]),s("h4",{attrs:{id:"dynamic-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-types"}},[t._v("#")]),t._v(" Dynamic types")]),t._v(" "),s("p",[t._v("You can store any type of value in the dynamic types variable. The type checking happened during the run time.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dynamic")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("variable_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("For example,")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dynamic")])]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Dynamic types is smiliar to the Object types. But type checking for object type variables occurs at compile time, while type checking for dynamically typed variables occurs at run time.")]),t._v(" "),s("h4",{attrs:{id:"string-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-types"}},[t._v("#")]),t._v(" String types")]),t._v(" "),s("p",[t._v("String types allow to assgin any string value.")]),t._v(" "),s("h4",{attrs:{id:"pointer-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pointer-types"}},[t._v("#")]),t._v(" Pointer types")]),t._v(" "),s("p",[t._v("A pointer type variable stores the memory address of another type. Pointers in C# have the same functionality as pointers in C or C++.")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[t._v("type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" identifier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("For example,")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" iptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
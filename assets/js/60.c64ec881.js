(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{645:function(e,t,s){"use strict";s.r(t);var a=s(17),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"foreword"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreword"}},[e._v("#")]),e._v(" Foreword")]),e._v(" "),s("p",[e._v("In the previous section, we learned that the render phase has two phases. In this section, we'll look at what the "),s("code",[e._v("beginWork")]),e._v(" method does.")]),e._v(" "),s("h2",{attrs:{id:"method-overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-overview"}},[e._v("#")]),e._v(" Method Overview")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3075",target:"_blank",rel:"noopener noreferrer"}},[e._v("You can find the defination of "),s("code",[e._v("beginWork")]),e._v(" though the source code"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("From the previous section we already know that the job of "),s("code",[e._v("beginWork")]),e._v(" is to pass in the "),s("code",[e._v("current Fiber node")]),e._v(" and create "),s("code",[e._v("child Fiber node")]),e._v(", let's see exactly how to do it from passing in the parameters.")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("beginWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("current")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("workInProgress")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("renderLanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Lanes")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("Including these parameters")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("current")]),e._v(", the "),s("code",[e._v("Fiber node")]),e._v(" corresponding to the current component at the last update, i.e. "),s("code",[e._v("workInProgress.alternate")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("workInProgress")]),e._v(", the "),s("code",[e._v("Fiber node")]),e._v(" corresponding to the current component.")]),e._v(" "),s("li",[s("code",[e._v("renderLanes")]),e._v(", prioritization related, we will talk about it when we talking about "),s("code",[e._v("Scheduler")]),e._v(".")])]),e._v(" "),s("p",[e._v("From the previous section "),s("code",[e._v("double buffer")]),e._v(", we know that except the "),s("code",[e._v("rootFiber")]),e._v(", when a component is "),s("code",[e._v("mount")]),e._v(", because it is rendered for the first time, there is no "),s("code",[e._v("Fiber node")]),e._v(" corresponding to the current component at the last update, as the reslut, "),s("code",[e._v("current === null")]),e._v(" when it is "),s("code",[e._v("mount")]),e._v(".")]),e._v(" "),s("p",[e._v("When the component is "),s("code",[e._v("update")]),e._v(", "),s("code",[e._v("current !== null")]),e._v(" since it has been "),s("code",[e._v("mount")]),e._v(".")]),e._v(" "),s("p",[e._v("Sowe could know the component is "),s("code",[e._v("mount")]),e._v(" or "),s("code",[e._v("update")]),e._v(" by judge "),s("code",[e._v("current === null ?")]),e._v(".")]),e._v(" "),s("p",[e._v("Based on that, we could devided "),s("code",[e._v("beginWork")]),e._v(" into two parts.")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("update")]),e._v(", if "),s("code",[e._v("current")]),e._v(" exists, you can reuse "),s("code",[e._v("current node")]),e._v(" when certain conditions are met, so that you can clone "),s("code",[e._v("current.child")]),e._v(" as "),s("code",[e._v("workInProgress.child")]),e._v(" instead of creating new "),s("code",[e._v("workInProgress.child")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("mount")]),e._v(", except for "),s("code",[e._v("fiberRootNode")]),e._v(", "),s("code",[e._v("current === null")]),e._v(". different types of "),s("code",[e._v("child Fiber node")]),e._v(" will be created depending on "),s("code",[e._v("fiber.tag")]),e._v(".")])])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("beginWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("current")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("workInProgress")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("renderLanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Lanes")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// update")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!==")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// reuse current")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("bailoutOnAlreadyFinishedWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// mount")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("switch")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("IndeterminateComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("LazyComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("FunctionComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("ClassComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("HostRoot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("HostComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("HostText")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h2",{attrs:{id:"update"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[e._v("#")]),e._v(" update")]),e._v(" "),s("p",[e._v("We can find out that when "),s("code",[e._v("didReceiveUpdate === false")]),e._v(", which means the "),s("code",[e._v("child Fiber")]),e._v(" could be reuse and do not need to create the new "),s("code",[e._v("child Fiber")]),e._v(".")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("oldProps === newProps && workInProgress.type === current.type")]),e._v(", which means "),s("code",[e._v("props")]),e._v(" and "),s("code",[e._v("fiber.type")]),e._v(" do not changed.")]),e._v(" "),s("li",[s("code",[e._v("!includesSomeLane(renderLanes, updateLanes)")]),e._v(", which means the priority of the current "),s("code",[e._v("Fiber node")]),e._v(" does not meet the priority requirement. We will discuss more when we talking about "),s("code",[e._v("Scheduler")]),e._v(".")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!==")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" oldProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("memoizedProps\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" newProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("pendingProps\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    oldProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!==")]),e._v(" newProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("hasLegacyContextChanged")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("__DEV__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!==")]),e._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("includesSomeLane")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" updateLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("switch")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("tag\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("bailoutOnAlreadyFinishedWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h2",{attrs:{id:"mount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mount"}},[e._v("#")]),e._v(" mount")]),e._v(" "),s("p",[e._v("When the optimization path is not satisfied, we move to the second part, the creation of new "),s("code",[e._v("child Fiber")]),e._v(".")]),e._v(" "),s("p",[e._v("We can see the logic to enter the creation of different types of "),s("code",[e._v("Fiber")]),e._v(" depending on the "),s("code",[e._v("fiber.tag")]),e._v(".")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactWorkTags.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("you can see the component type corresponding to the tag"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("switch")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("IndeterminateComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("LazyComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("FunctionComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("ClassComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("HostRoot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("HostComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("HostText")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("For some common component types, such as "),s("code",[e._v("FunctionComponent")]),e._v(", "),s("code",[e._v("ClassComponent")]),e._v(" or "),s("code",[e._v("HostComponent")]),e._v(", they will enter the "),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L233",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("reconcilerChildren")]),s("OutboundLink")],1),e._v(" method.")]),e._v(" "),s("h2",{attrs:{id:"reconcilerchildren"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reconcilerchildren"}},[e._v("#")]),e._v(" reconcilerChildren")]),e._v(" "),s("p",[e._v("We could find out that this is the core part of the Reconciler through the name of the function. Let us explore it.")]),e._v(" "),s("ul",[s("li",[e._v("For "),s("code",[e._v("mount")]),e._v(" component, it will create new "),s("code",[e._v("child Fiber node")]),e._v(".")]),e._v(" "),s("li",[e._v("For "),s("code",[e._v("update")]),e._v(" compoennt, it will compare the current component with the "),s("code",[e._v("Fiber node")]),e._v(" corresponding to the component at the last update (also known as "),s("code",[e._v("Diff")]),e._v(" algorithm), and generate a new "),s("code",[e._v("Fiber node")]),e._v(" as a result of the comparison.")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("reconcileChildren")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("current")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("workInProgress")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("nextChildren")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("renderLanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Lanes")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// for mount")]),e._v("\n    workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mountChildFibers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      nextChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      renderLanes\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// for update")]),e._v("\n    workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("reconcileChildFibers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      nextChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      renderLanes\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("As you can see from the code, same as "),s("code",[e._v("beginWork")]),e._v(", it also uses "),s("code",[e._v("current === null ?")]),e._v(" to judge the "),s("code",[e._v("mount")]),e._v(" or "),s("code",[e._v("update")]),e._v(".")]),e._v(" "),s("p",[e._v("Regardless of the logic, it will eventually generate a new child "),s("code",[e._v("Fiber node")]),e._v(" and assign it to "),s("code",[e._v("workInProgress.child")]),e._v(", which will be used as the "),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L1158",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("return value of the beginWork")]),s("OutboundLink")],1),e._v(" and "),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1702",target:"_blank",rel:"noopener noreferrer"}},[e._v("as a "),s("code",[e._v("reference")]),e._v(" to "),s("code",[e._v("workInProgress")]),e._v(" in the next "),s("code",[e._v("performUnitOfWork")]),e._v(" execution"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[e._v("Mentioning that, the logic of both methods, "),s("code",[e._v("mountChildFibers")]),e._v(" and "),s("code",[e._v("reconcileChildFibers")]),e._v(", is basically the same. The only difference is that "),s("code",[e._v("reconcileChildFibers")]),e._v(" takes the "),s("code",[e._v("effectTag")]),e._v(" attribute for the generated "),s("code",[e._v("Fiber node")]),e._v(", while "),s("code",[e._v("mountChildFibers")]),e._v(" does not.")])]),s("h2",{attrs:{id:"effecttag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#effecttag"}},[e._v("#")]),e._v(" effectTag")]),e._v(" "),s("p",[e._v("As we know, the "),s("code",[e._v("render")]),e._v(" phase works in memory, and when the work is finished the "),s("code",[e._v("Renderer")]),e._v(" is notified of the "),s("code",[e._v("DOM")]),e._v(" operations that need to be performed. The specific type of "),s("code",[e._v("DOM")]),e._v(" operation to be performed is stored in "),s("code",[e._v("fiber.effectTag")]),e._v(".")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("You can see the DOM operations corresponding to the effectTag from here"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("For example,")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// insert DOM")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" Placement "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*                */")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0b00000000000010")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// DOM required update")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" Update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*                   */")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0b00000000000100")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// insert DOM and required update")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" PlacementAndUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*       */")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0b00000000000110")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// delete DOM")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" Deletion "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*                 */")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0b00000000001000")]),e._v("\n")])])]),s("p",[e._v("The binary representation of the "),s("code",[e._v("effectTag")]),e._v(" makes it easy to assign multiple "),s("code",[e._v("effects")]),e._v(" to "),s("code",[e._v("fiber.effectTag")]),e._v(" using bit manipulation.")]),e._v(" "),s("p",[e._v("For notifing the "),s("code",[e._v("Renderer")]),e._v(" to insert the "),s("code",[e._v("DOM node")]),e._v(" corresponding to the "),s("code",[e._v("Fiber node")]),e._v(" into the page, two conditions need to be satisfied.")]),e._v(" "),s("ol",[s("li",[s("p",[s("code",[e._v("fiber.stateNode")]),e._v(" exists, which means the "),s("code",[e._v("corresponding DOM node")]),e._v(" is saved in the "),s("code",[e._v("Fiber node")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("(fiber.effectTag & Placement) ! == 0")]),e._v(", that is, the "),s("code",[e._v("Fiber node")]),e._v(" exists "),s("code",[e._v("Placement effectTag")]),e._v(".")])])]),e._v(" "),s("p",[e._v("We know that when "),s("code",[e._v("mount")]),e._v(", "),s("code",[e._v("fiber.stateNode === null")]),e._v(", and the "),s("code",[e._v("mountChildFibers")]),e._v(" called in "),s("code",[e._v("reconcileChildren")]),e._v(" will not assign "),s("code",[e._v("effectTag")]),e._v(" to the Fiber node. So how is the first screen rendering done?")]),e._v(" "),s("p",[e._v("To answer the first question, "),s("code",[e._v("fiber.stateNode")]),e._v(" is created in "),s("code",[e._v("completeWork")]),e._v(", which we will cover in the next section.")]),e._v(" "),s("p",[e._v("The answer to the second question is very clever. Assuming that "),s("code",[e._v("mountChildFibers")]),e._v(" will also assign "),s("code",[e._v("effectTag")]),e._v(", then it is foreseen that all nodes in the whole "),s("code",[e._v("Fiber tree")]),e._v(" will have "),s("code",[e._v("Placement effectTag")]),e._v(" at the time of "),s("code",[e._v("mount")]),e._v(", then each node will perform an insertion operation during the "),s("code",[e._v("commit")]),e._v(" phase when performing "),s("code",[e._v("DOM")]),e._v(" operations, so a large number of "),s("code",[e._v("DOM")]),e._v(" operations is extremely inefficient.")]),e._v(" "),s("p",[e._v("In order to solve this problem, only the "),s("code",[e._v("rootFiber")]),e._v(" will be assigned the "),s("code",[e._v("Placement effectTag")]),e._v(" at the time of "),s("code",[e._v("mount")]),e._v(", and only one insertion operation will be performed at the "),s("code",[e._v("commit")]),e._v(" stage.")])])}),[],!1,null,null,null);t.default=n.exports}}]);